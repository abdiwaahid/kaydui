---
import type { GetStaticPaths } from "astro";
import { components } from "../../lib/code";
import Layout from "../../layouts/Layout.astro";
import { Code } from 'astro:components';

export const getStaticPaths = (() => {
  return components.map((component) => {
    return {
      params: {
        slug: component.slug,
      },
      props: component,
    };
  });
}) satisfies GetStaticPaths;

const { slug } = Astro.params;
const component = Astro.props;
---

<Layout title={`${component.name} - Components - `}>
  <div class="max-w-7xl mx-auto px-4 py-8">
    <div class="mb-6">
      <a
        href="/components"
        class="inline-flex items-center text-gray-600 dark:text-gray-300 hover:text-primary transition-colors mb-4"
      >
        <svg
          class="w-4 h-4 mr-2"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
        Back to Components
      </a>

      <div class="flex items-start justify-between mb-4">
        <div>
          <h1
            id="componentTitle"
            class="text-3xl font-bold mb-2 text-gray-900 dark:text-white"
          >
            {component.name}
          </h1>
          <p
            id="componentDescription"
            class="text-lg text-gray-600 dark:text-gray-300 mb-4"
          >
            {component.description ?? ""}
          </p>
          <div id="componentTags" class="flex flex-wrap gap-2">
            <!-- Tags will be populated by JavaScript -->
          </div>
        </div>

        <div class="flex space-x-2"></div>
      </div>
    </div>
    <div class="space-y-6">
      <div class="tab-content">
        <div
          class="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700"
        >
          <input
            type="checkbox"
            name="toggleCode"
            id="toggleCode"
            class="hidden peer"
          />
          <div
            class="p-3 border-b border-gray-200 dark:border-gray-700 flex items-center justify-end"
          >
            <div class="flex items-center gap-2 transition-all ease-in-out">
              <label
                for="toggleCode"
                class="cursor-pointer flex items-center justify-center gap-2 p-2.5 border border-gray-200 rounded-lg text-sm font-medium transition-colors bg-gray-100 text-primary hover:bg-gray-200"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="size-5 "
                  ><path d="m18 16 4-4-4-4" data--h-bstatus="0OBSERVED"
                  ></path><path d="m6 8-4 4 4 4" data--h-bstatus="0OBSERVED"
                  ></path><path d="m14.5 4-5 16" data--h-bstatus="0OBSERVED"
                  ></path></svg
                >
              </label>
              <copy-code data-code={component.code}>
                <button
                  id="copy"
                  class="cursor-pointer flex items-center justify-center gap-2 p-2.5 border border-gray-200 rounded-lg text-sm font-medium transition-colors bg-gray-100 text-primary hover:bg-gray-200"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="size-5"
                    ><rect
                      width="14"
                      height="14"
                      x="8"
                      y="8"
                      rx="2"
                      ry="2"
                      data--h-bstatus="0OBSERVED"></rect><path
                      d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
                      data--h-bstatus="0OBSERVED"></path></svg
                  >
                </button>
              </copy-code>
            </div>
          </div>
          <div class="peer p-6 peer-checked:hidden">
            <div
              id="componentPreview"
              class="grid place-items-center component-preview min-h-[400px] overflow-auto"
            >
              <Fragment set:html={component.code} />
            </div>
          </div>
          <div class="peer  hidden peer-checked:block">
            <div
              id="componentPreview"
              class="grid place-items-center component-preview min-h-[400px] overflow-auto"
            >
              <Code class={'h-full w-full'} lang="html" code={component.code.trim()} theme={'dark-plus'} />
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  function copy(text: any) {
    navigator.clipboard.writeText(text);
  }

  class CopyCode extends HTMLElement {
    connectedCallback() {
      const code = this.dataset.code;

      document.getElementById("copy")?.addEventListener("click", () => {
        copy(code);
        window.showToast("success", "Copied", "Code copied to clipboard");
      });
    }
  }
  customElements.define("copy-code", CopyCode);
</script>
